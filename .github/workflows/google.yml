# Make sure to have these in your repository secrets:
# GKE_PROJECT: your GCP project ID
# DEPLOYMENT_NAME: the name of your deployment
# GKE_SA_EMAIL: the service account email address
# GKE_WORKLOAD_IDENTITY_PROVIDER: the workload identity provider

name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-west1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: main    # TODO: update to cluster name
  GKE_ZONE: us-central1-b   # TODO: update to cluster zone
  DEPLOYMENT_NAME: ${{ secrets.DEPLOYMENT_NAME}} # TODO: update to deployment name
  REPOSITORY: hello-repo # TODO: update to Artifact Registry docker repository
  IMAGE: ${{ secrets.DEPLOYMENT_NAME}}
  PORT_NUMBER: 8000

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.GKE_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GKE_SA_EMAIL }}

    - name: Docker configuration
      run: |-
        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    - name: Set up environment variables
      run: |
        echo "${{ secrets.ENV_FILE }}" > .env
        echo "${{ secrets.GCLOUD_KEY_JSON_BASE64 }}" | base64 --decode > gcloud-key.json
        echo "${{ secrets.FIREBASE_KEY_JSON_BASE64 }}" | base64 --decode > firebase-key.json


    # Build the Docker image
    - name: Build
      run: |
        docker build \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \

    - name: Run tests in Docker container
      run: |
        docker run --rm \
          -e PYTHONPATH="/app" \
          "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
          pytest --cov=myapp
          
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        # replacing the image name in the k8s template
        ./kustomize edit set image image-url=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide

